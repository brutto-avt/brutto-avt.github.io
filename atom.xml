<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Brutto-AVT</title>
  <subtitle>André Luan Chiquetto</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://brutto-avt.github.io/"/>
  <updated>2017-01-25T03:05:00.713Z</updated>
  <id>http://brutto-avt.github.io/</id>
  
  <author>
    <name>Brutto-AVT</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Evitando o callback hell</title>
    <link href="http://brutto-avt.github.io/24/01/2017/Evitando-o-callback-hell/"/>
    <id>http://brutto-avt.github.io/24/01/2017/Evitando-o-callback-hell/</id>
    <published>2017-01-25T01:54:45.000Z</published>
    <updated>2017-01-25T03:05:00.713Z</updated>
    
    <content type="html">&lt;p&gt;O Javascript tem como uma de suas características mais marcantes o fato de ser assíncrono, ou seja, quando uma chamada a uma função que não irá retornar imediatamente seu valor é realizada, o interpretador simplesmente pula para a próxima linha de código, por exemplo:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;assincrono&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;params&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(params.txt);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;, params.milis);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;assincrono(&amp;#123;txt:&lt;span class=&quot;string&quot;&gt;&#39;primeiro&#39;&lt;/span&gt;, milis:&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;segundo&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Irá retornar:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;segundo&lt;/p&gt;
&lt;p&gt;primeiro&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Até a versão ES5 do Javascript, caso fosse implementanda uma rotina onde é absolutamente necessário aguardar o retorno de uma chamada para executar a próxima, era necessário fazer o uso de callbacks:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;assincrono&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;params, callback&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(params.txt);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    callback();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;, params.milis);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;assincrono(&amp;#123;txt:&lt;span class=&quot;string&quot;&gt;&#39;primeiro&#39;&lt;/span&gt;, milis:&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;segundo&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Nesse caso o retorno seria o esperado:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;primeiro&lt;/p&gt;
&lt;p&gt;segundo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Entretando, dependendo da complexidade da rotina, pode ser necessário aguardar mais de uma vez:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;umaFuncaoAssincrona(params, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  eOutra(params, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    eMaisOutra(params, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      eAssimPorDiante(params, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;resultadoFinal&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(resultadoFinal);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Não há necessariamente algo errado com essa implementação, porém a legibilidade do código torna-se quase um trabalho árduo quando a lógica de cada chamada começa a aumentar em lnhas de código. Com isso em mente, na versão ES6 do Javascript foram instroduzidas as promises.&lt;/p&gt;
&lt;p&gt;Basicamente, uma promise é uma função que retorna um valor “provisório” até que o valor real seja retornado pela rotina, por exemplo:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;assincrono&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;params&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;resolve&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(params.txt);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      resolve();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;, params.milis);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; r1 = assincrono(&amp;#123;txt: &lt;span class=&quot;string&quot;&gt;&#39;primeiro&#39;&lt;/span&gt;, milis:&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; r2 = r1.then(assincrono.bind(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &amp;#123;txt: &lt;span class=&quot;string&quot;&gt;&#39;segundo&#39;&lt;/span&gt;, milis: &lt;span class=&quot;number&quot;&gt;1200&lt;/span&gt;&amp;#125;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; r3 = r2.then(assincrono.bind(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &amp;#123;txt: &lt;span class=&quot;string&quot;&gt;&#39;terceiro&#39;&lt;/span&gt;, milis: &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;&amp;#125;));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Nesse caso o resultado segue exatamente a ordem especificada:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;primeiro&lt;/p&gt;
&lt;p&gt;segundo&lt;/p&gt;
&lt;p&gt;terceiro&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;O que deve ser entendido nesse caso é que uma promisse possui um método &lt;code&gt;then()&lt;/code&gt; que é chamado no momento em que a promise tem seu valor resolvido. O &lt;code&gt;then()&lt;/code&gt; recebe por parâmetro quaisquer valores passados como parâmetro na função &lt;code&gt;resolve()&lt;/code&gt; da promise. Uma vez que o &lt;code&gt;then()&lt;/code&gt; retorna uma nova promise, podemos facilmente aninhar nossas chamadas. No exemplo acima podemos observar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Temos a variavel &lt;code&gt;r1&lt;/code&gt; contendo a promise retornada pela função &lt;code&gt;assincrono&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Em seguida, usamos o método &lt;code&gt;bind()&lt;/code&gt; para retornar uma nova variante da função &lt;code&gt;assincrono&lt;/code&gt; (mais sobre isso adiante) e a colocamos como chamada para o &lt;code&gt;then&lt;/code&gt; da promise &lt;code&gt;r1&lt;/code&gt;. Essa nova promise gerada pelo &lt;code&gt;then&lt;/code&gt; é armazenada na variável &lt;code&gt;r2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Para a variável &lt;code&gt;r3&lt;/code&gt; basicamente repetimos o mesmo processo acima&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A partir do ES5, o Javascript adicionou o método &lt;code&gt;bind&lt;/code&gt; ao protótipo das funções. O que ele faz é basicamente sobrescrever a referência do &lt;code&gt;this&lt;/code&gt; dentro do contexto da função, passando-o por parâmetro (o primeiro). Uma coisa importante sobre o &lt;code&gt;bind&lt;/code&gt; é que ele retorna uma nova função, mas não a executa. Por exemplo:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// uma &quot;classe&quot; simples para representar um botão&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Botao = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;texto&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.texto = texto;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// adicionamos o metodo clicar ao botao, fazendo referencia ao atributo texto da instancia&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Botao.prototype.clicar = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.texto + &lt;span class=&quot;string&quot;&gt;&#39; foi clicado&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// criamos uma nova instancia do botao&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; botaoOk = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Botao(&lt;span class=&quot;string&quot;&gt;&#39;OK&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// chamamos diretamente o método&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;botaoOk.clicar();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// funcao com callback simples&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; executar = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;callback&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  callback();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// dizemos que o callback é o metodo clicar&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;executar(botaoOk.clicar);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;O resultado é:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OK foi clicado&lt;/p&gt;
&lt;p&gt;undefined foi clicado&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Como o método &lt;code&gt;clicar()&lt;/code&gt; está dentro de outro contexto, o valor do &lt;code&gt;this&lt;/code&gt; na classe passa a ser diferente do original. Para evitar esse problema, pode-se simplesmente usar o bind:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;executar(botaoOk.clicar.bind(botaoOk));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Como falado, o primeiro parâmetro d &lt;code&gt;bind()&lt;/code&gt; sempre é o novo valor do &lt;code&gt;this&lt;/code&gt;. Porém, parâmetros adicionais também podem ser passados. No nosso caso, o &lt;code&gt;bind&lt;/code&gt; necessitava de parâmetros pré-definidos, porém não deveria ser executado pois era necessário que fosse passado como parâmetro para o &lt;code&gt;then&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Portanto, para que a função fosse executada com os parâmetros corretos, porém só fosse executada após o &lt;code&gt;then&lt;/code&gt; da promise anterior, usamos o &lt;code&gt;bind&lt;/code&gt; para gerar uma nova função a ser passada por referência. Com isso, chegamos em nossa primeira solução para escapar do callback hell.&lt;/p&gt;
&lt;p&gt;Uma segunda característica interessante do ES6 são os generators. Eles basicamente atuam como interruptores, onde nós decidimos quando a execução deve pausar e quando continuar. Eis um exemplo:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;assincrono&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;params&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;resolve&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      resolve(params.txt);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      gen.next(params.txt);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;, params.milis);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;sequencia&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p1 = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; assincrono(&amp;#123;txt:&lt;span class=&quot;string&quot;&gt;&#39;primeiro &#39;&lt;/span&gt;,milis:&lt;span class=&quot;number&quot;&gt;1500&lt;/span&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p2 = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; assincrono(&amp;#123;txt:&lt;span class=&quot;string&quot;&gt;&#39;segundo &#39;&lt;/span&gt;,milis:&lt;span class=&quot;number&quot;&gt;1200&lt;/span&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p3 = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; assincrono(&amp;#123;txt:&lt;span class=&quot;string&quot;&gt;&#39;terceiro&#39;&lt;/span&gt;,milis:&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p4 = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; assincrono(&amp;#123;txt:&lt;span class=&quot;string&quot;&gt;&#39;quarto&#39;&lt;/span&gt;,milis:&lt;span class=&quot;number&quot;&gt;1100&lt;/span&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(p1,p2,p3,p4);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gen = sequencia();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gen.next();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Segue a explicação:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nossa função &lt;code&gt;assincrono()&lt;/code&gt; continua igual, exceto que agora ela possui uma chamada para o método &lt;code&gt;next()&lt;/code&gt; do generator.&lt;/li&gt;
&lt;li&gt;O generator é caracterizado pelo asterisco após a palavra &lt;code&gt;function&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;O comando &lt;code&gt;yield&lt;/code&gt; pausa a execução até que o método &lt;code&gt;next()&lt;/code&gt; seja chamado.&lt;/li&gt;
&lt;li&gt;é necessário instanciar nosso generator (especialmente porque ele é referenciado na funçao assíncrona) e dar o primeiro &lt;code&gt;next()&lt;/code&gt; para iniciá-lo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Como estamos sempre chamando o &lt;code&gt;next()&lt;/code&gt; após a conclusão da chamda assíncrona, o resultado final fica:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;primeiro&lt;/p&gt;
&lt;p&gt;segundo&lt;/p&gt;
&lt;p&gt;terceiro&lt;/p&gt;
&lt;p&gt;quarto&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;O Javascript tem como uma de suas características mais marcantes o fato de ser assíncrono, ou seja, quando uma chamada a uma função que n
    
    </summary>
    
    
      <category term="javascript" scheme="http://brutto-avt.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Dica útil do dia - Controle no ngRepeat</title>
    <link href="http://brutto-avt.github.io/19/07/2016/Dica-util-do-dia-Controle-no-ngRepeat/"/>
    <id>http://brutto-avt.github.io/19/07/2016/Dica-util-do-dia-Controle-no-ngRepeat/</id>
    <published>2016-07-20T02:32:39.000Z</published>
    <updated>2016-07-20T02:54:14.349Z</updated>
    
    <content type="html">&lt;p&gt;Uma coisa bastante útil que descobri é que é possível obter o par chave-valor dentro do ngRepeat. Isso torna as coisas mais interessantes, aumentando as possibilidades do que pode ser feito com a diretiva.&lt;/p&gt;
&lt;p&gt;Supondo que eu deseje gerar uma tabela com um número dinâmico tanto de linhas, quanto de colunas e partindo do princípio de que eu tenho os dados no seguinte formato e gostaria de obter o resultado abaixo:&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$scope.dados = [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123;&lt;span class=&quot;string&quot;&gt;col_1:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;aaa&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;col_2:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;bbb&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;col_3:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;ccc&#39;&lt;/span&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123;&lt;span class=&quot;string&quot;&gt;col_1:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;ddd&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;col_2:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;eee&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;col_3:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;fff&#39;&lt;/span&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123;&lt;span class=&quot;string&quot;&gt;col_1:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;ggg&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;col_2:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;hhh&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;col_3:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;iii&#39;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Coluna 1&lt;/th&gt;
&lt;th&gt;Coluna 2&lt;/th&gt;
&lt;th&gt;Coluna 3&lt;/th&gt;
&lt;th&gt;…&lt;/th&gt;
&lt;th&gt;Coluna N&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;aaa&lt;/td&gt;
&lt;td&gt;bbb&lt;/td&gt;
&lt;td&gt;ccc&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ddd&lt;/td&gt;
&lt;td&gt;eee&lt;/td&gt;
&lt;td&gt;fff&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ggg&lt;/td&gt;
&lt;td&gt;hhh&lt;/td&gt;
&lt;td&gt;iii&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;zzz&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Para obter o nome da chave é simples assim:&lt;/p&gt;
&lt;figure class=&quot;highlight django&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-repeat&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;linha in dados&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-repeat&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;(chave, valor) in linha&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123; valor &amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Caso eu deseje dar um nome mais humanizado às colunas, posso adicionar um novo objeto de mapeamento:&lt;/p&gt;
&lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&lt;span class=&quot;meta-keyword&quot;&gt;$scope&lt;/span&gt;.colunas = &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  col_1: &lt;span class=&quot;string&quot;&gt;&#39;Coluna 1&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  col_2: &lt;span class=&quot;string&quot;&gt;&#39;Coluna 2&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  col_3: &lt;span class=&quot;string&quot;&gt;&#39;Coluna 3&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;E finalmente, o resultado final:&lt;/p&gt;
&lt;figure class=&quot;highlight django&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;thead&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-repeat&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;col in colunas&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123; col &amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;thead&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;tbody&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-repeat&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;linha in dados&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-repeat&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;(chave, valor) in linha&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123; valor &amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;tbody&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Plunkr: &lt;a href=&quot;https://plnkr.co/edit/9wLTqgNUB7qG8qA499Hx?p=preview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://plnkr.co/edit/9wLTqgNUB7qG8qA499Hx?p=preview&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Uma coisa bastante útil que descobri é que é possível obter o par chave-valor dentro do ngRepeat. Isso torna as coisas mais interessantes
    
    </summary>
    
    
      <category term="angular" scheme="http://brutto-avt.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>Debugando Node via console</title>
    <link href="http://brutto-avt.github.io/04/07/2016/Debugando-Node-via-console/"/>
    <id>http://brutto-avt.github.io/04/07/2016/Debugando-Node-via-console/</id>
    <published>2016-07-04T22:40:07.000Z</published>
    <updated>2016-07-04T22:47:20.815Z</updated>
    
    <content type="html">&lt;p&gt;Nem sempre podemos nos dar ao luxo de ter uma IDE à mão naquele momento em que precisamos corrigir algum erro ou mesmo testar nosso código. Além disso, várias IDEs adicionam uma carga extra na hora de debuggar uma aplicação, tornando a execução em modo debug mais lenta.&lt;/p&gt;
&lt;p&gt;Qualquer que seja o caso, se você estiver sem uma IDE, apenas quiser economizar tempo ou então simplesmente quiser aprender uma forma diferente, eis o momento.&lt;/p&gt;
&lt;p&gt;Para começar é bastante simples. Basta rodar o seguinte comando no console:&lt;br&gt;&lt;code&gt;node --debug index.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ou, se preferir que o debugger pare imediatamente na primeira linha do seu script, o comando muda um pouco:&lt;br&gt;&lt;code&gt;node --debug-brk index.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A partir daí, você pode adicionar breakpoints no seu código desta forma:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; teste = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;a, b&lt;/span&gt;) &lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;debugger&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a + b;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;A instrução &lt;code&gt;debugger&lt;/code&gt; sinaliza que naquela linha a execução deverá ser interrompida e o contexto analizado. Entretanto, é necessário reiniciar seu script para que o breakpoint tenha efeito. Isso é feito no console através do comando restart.&lt;/p&gt;
&lt;p&gt;Para controlar a execução, basta usar os seguintes comandos no console:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cont&lt;/code&gt; ou &lt;code&gt;c&lt;/code&gt;: continua a execução (equivalente ao F8 no Chrome DevTools)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pause&lt;/code&gt;: pausa a execução (F8 no DevTools)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next&lt;/code&gt; ou &lt;code&gt;n&lt;/code&gt;: avança para a próxima linha (F10 no DevTools)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;step&lt;/code&gt; ou &lt;code&gt;s&lt;/code&gt;: “entra” em uma função (F11 no DevTools)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;out&lt;/code&gt; ou &lt;code&gt;o&lt;/code&gt;: “sai” de uma função (Shift + F11 no DevTools)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Se preferir adicionar breakpoints sem ter que alterar seu script ou reiniciar sua aplicação, você pode seguir o seguinte:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sb()&lt;/code&gt;: define um breakpoint na linha atual&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sb(8)&lt;/code&gt;: define um breakpoint na linha 8 do script atual&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sb(&amp;#39;minhaFuncao()&amp;#39;)&lt;/code&gt;: define um breakpoint na primeira linha da função informada&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sb(&amp;#39;outro-script.js&amp;#39;, 2)&lt;/code&gt;: define um breakpoint na linha 2 do script informado&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cb(...)&lt;/code&gt;: remove um breakpoint (aceita os mesmos parâmetros do comando sb()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Também é possível observar valores com o comando watch, por exemplo:&lt;br&gt;&lt;code&gt;watch(JSON.stringify(meuObjeto))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A qualquer momento você pode consultar o valor de seus watchs com o comando watchers. Para remover um watch, o comando é &lt;code&gt;unwatch(...)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Mais alguns comandos úteis:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list(10)&lt;/code&gt;: mostra 10 linhas de código antes e depois da linha atual&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec JSON.stringify(meuObjeto)&lt;/code&gt;: executa uma expressão no contexto atual&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repl&lt;/code&gt;: abre um “shell” do node no contexto atual onde você pode editar o código em tempo de execução (entretanto ele não será salvo). Para sair do shell, basta teclar CTRL + C&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Nem sempre podemos nos dar ao luxo de ter uma IDE à mão naquele momento em que precisamos corrigir algum erro ou mesmo testar nosso códig
    
    </summary>
    
    
      <category term="node" scheme="http://brutto-avt.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Dica útil do dia - Filtro slice</title>
    <link href="http://brutto-avt.github.io/04/07/2016/Dica-util-do-dia-Filtro-slice/"/>
    <id>http://brutto-avt.github.io/04/07/2016/Dica-util-do-dia-Filtro-slice/</id>
    <published>2016-07-04T22:01:48.000Z</published>
    <updated>2016-07-04T22:08:47.580Z</updated>
    
    <content type="html">&lt;p&gt;Quando estou desenvolvendo em JS às vezes sinto falta do Python e seus operadores malandros, do tipo:&lt;/p&gt;
&lt;figure class=&quot;highlight prolog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;meuArray = [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;]  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print meuArray[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:]  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print meuArray[:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print meuArray[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;O primeiro print irá retornar: &lt;code&gt;[&amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;]&lt;/code&gt;&lt;br&gt;O segundo irá retornar: &lt;code&gt;[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]&lt;/code&gt;&lt;br&gt;O último irá retornar: &lt;code&gt;[&amp;#39;b&amp;#39;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Como não temos algo assim em JS e nem nativo no Angular, é necessário criar um filter, mais ou menos assim:&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;app.filter(&lt;span class=&quot;string&quot;&gt;&#39;slice&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(arr, inicio, fim)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    inicio = inicio ? inicio : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fim) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr.slice(inicio, fim);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr.slice(inicio);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Para utilizá-lo:&lt;/p&gt;
&lt;figure class=&quot;highlight django&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-repeat&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item in meuArray | slice:1:2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123;item&amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Fiddle: &lt;a href=&quot;https://jsfiddle.net/6zvcd6vz/2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://jsfiddle.net/6zvcd6vz/2/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Quando estou desenvolvendo em JS às vezes sinto falta do Python e seus operadores malandros, do tipo:&lt;/p&gt;
&lt;figure class=&quot;highlight prolog
    
    </summary>
    
    
      <category term="angular" scheme="http://brutto-avt.github.io/tags/angular/"/>
    
  </entry>
  
</feed>
